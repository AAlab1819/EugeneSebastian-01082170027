
For the first question the program must satisfy two conditions. When the type is 1, the 
the sum will be taken from an unordered list of stones which in this case was array a[100005].
Secondly it needs to have a list sorted ascendingly which in this case was k[100005].
Using the array we subtact the cummulative sum of the right with the left boundary a[r]-a[l-1] / k[r]-k[l-1].
a[r] / k[r] contains sums of the right boundary while a[l-1] / k[l-1] "cuts" to create the left boundary and hence the range.
Question : http://codeforces.com/contest/433/problem/B
Ans: http://codeforces.com/contest/433/submission/45030606


For the second question the program uses the array a[33] to store the inputs but at the same time
discards the unimportant inputs ex. if it's far too overpriced compared to it's other counterparts
by liter comparison. Essentially the array stores the cheapest price for a particular litter.
Next the function iterates where it starts from the largest litter based cost since it occupies the most space.
Where it uses variable l to store the amount of liters remaining to be bought and continually reduces it till
it reaches 0. The variable cur displays the current price.
http://codeforces.com/contest/913/submission/34605979
